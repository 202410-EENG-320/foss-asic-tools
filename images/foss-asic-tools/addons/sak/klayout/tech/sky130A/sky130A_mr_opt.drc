# Run script : klayout -rd input=<input gds/oas> -rd report=<report file.txt/xml> -rd summary_file=<name of summary file, default:DRC_report_summary.txt> -rd thr=<number of threads, default is 8> -rd tiles=<tile width and length, default is 200> -rd feol=1 -rd beol=1 -z -r sky130A_mr_opt.drc

if $input
  inp = source($input, $top_cell)
end

lay = inp.layout

if $report
  report("SKY130 DRC runset", $report)
else
  report("SKY130 DRC runset", File.join(File.dirname(RBA::CellView::active.filename), "sky130_drc.txt"))
end

AL = true  # do not change
CU = false  # do not change
# choose betwen only one of  AL  or  CU  back-end flow here :
backend_flow = AL

# enable / disable rule groups
if $feol == "0"
    FEOL    = false # front-end-of-line checks
else
    FEOL    = true # front-end-of-line checks
end
if $beol == "0"
    BEOL    = false # back-end-of-line checks
else
    BEOL    = true # back-end-of-line checks
end
if $offgrid == "0"
    OFFGRID = false # manufacturing grid/angle checks
else
    OFFGRID = true # manufacturing grid/angle checks
end


# klayout setup
########################
def log_modes()
  deepP  = is_deep?
  tiledP = is_tiled?
  log("... deep:#{deepP} tiled:#{tiledP}")
end

# if going back & forth between deep <=> tiles() need to reset tile-size & borders
def Tiled()
  if $tiles
    tiles($tiles.to_f)
  else
    tiles(200.um)
  end
  tile_borders(3.um)
end

# Note: deep: should be used very selectively.
# In deep-mode: plain cmds outside (typically before) TP.execute, don't participate
# in ordinary multithreaded tiling (but do participate in, the lesser, hier-based multithreading).
# And... even for flat tiling (in or out of TP.execute), we still must avoid certain operations,
# like interacting.
# BUT: believe enclosing() is not one of those cmds.
# Expensive part of li.5 are two enclosing stmts: Make sure those are done in flat tiling mode!
#
# Cannot just change to flat/tiling (for all pre-TP commands) since: some of those are interacting,
# i.e. of the variety that cannot be tiled.

if $thr
    threads($thr)
else
    threads(8)
end

# if more inof is needed, set true
verbose(true)

inputs = Array.new
outputs = Array.new


$tp = RBA::TilingProcessor::new
if $tiles
  $tp.tile_size($tiles.to_f, $tiles.to_f)
      tiles($tiles.to_f)
else
  $tp.tile_size(200, 200)
      tiles(200.um)
end
if $thr
  $tp.threads = $thr.to_i
else
  $tp.threads = 8
end
$tp.dbu = lay.dbu
$tp.tile_border(3,3)
    tile_borders(3.um)
$count = 0

# hierachical. Note: using tiles() just to set tile-size also turns-off deep mode. So set deep *after* tiles().
#Tiled(); log_modes()

def drc_check(output, inputs, script) 

  $tp.output("output_#{$count}", output.last[:data].data)
  inputs.each do |inp|
    $tp.input(inp[:name], inp[:layer].data)
  end
  $tp.queue("_output(output_#{$count}, #{script})")
  $count = $count + 1

end

# layers definitions
########################

# all except purpose (datatype) 5 -- label and 44 -- via
li_wildcard = "67/20"
mcon_wildcard = "67/44"

m1_wildcard = "68/20"
via_wildcard = "68/44"

m2_wildcard = "69/20"
via2_wildcard = "69/44"

m3_wildcard = "70/20"
via3_wildcard = "70/44"

m4_wildcard = "71/20"
via4_wildcard = "71/44"

m5_wildcard = "72/20"

diff = input(65, 20)
tap = polygons(65, 44)
nwell = polygons(64, 20)
dnwell = polygons(64, 18)
pwbm = polygons(19, 44)
pwde = polygons(124, 20)
natfet = polygons(124, 21)
hvtr = polygons(18, 20)
hvtp = polygons(78, 44)
ldntm = polygons(11, 44)
hvi = polygons(75, 20)
tunm = polygons(80, 20)
lvtn = polygons(125, 44)
poly = polygons(66, 20)
hvntm = polygons(125, 20)
nsdm = polygons(93, 44)
psdm = polygons(94, 20)
rpm = polygons(86, 20)
urpm = polygons(79, 20)
npc = polygons(95, 20)
licon = polygons(66, 44)

li = polygons(li_wildcard)
mcon = polygons(mcon_wildcard)

m1 = polygons(m1_wildcard)
via = polygons(via_wildcard)

m2 = polygons(m2_wildcard)
via2 = polygons(via2_wildcard)

m3 = polygons(m3_wildcard)
via3 = polygons(via3_wildcard)

m4 = polygons(m4_wildcard)
via4 = polygons(via4_wildcard)

m5 = polygons(m5_wildcard)

pad = polygons(76, 20)
nsm = polygons(61, 20)
capm = polygons(89, 44)
cap2m = polygons(97, 44)
vhvi = polygons(74, 21)
uhvi = polygons(74, 22)
npn = polygons(82, 20)
inductor = polygons(82, 24)
vpp = polygons(82, 64)
pnp = polygons(82, 44)
lvs_prune = polygons(84, 44)
ncm = polygons(92, 44)
padcenter = polygons(81, 20)
mf = polygons(76, 44)
areaid_sl = polygons(81, 1)
areaid_ce = polygons(81, 2)
areaid_fe = polygons(81, 3)
areaid_sc = polygons(81, 4)
areaid_sf = polygons(81, 6)
areaid_sw = polygons(81, 7)
areaid_sr = polygons(81, 8)
areaid_mt = polygons(81, 10)
areaid_dt = polygons(81, 11)
areaid_ft = polygons(81, 12)
areaid_ww = polygons(81, 13)
areaid_ld = polygons(81, 14)
areaid_ns = polygons(81, 15)
areaid_ij = polygons(81, 17)
areaid_zr = polygons(81, 18)
areaid_ed = polygons(81, 19)
areaid_de = polygons(81, 23)
areaid_rd = polygons(81, 24)
areaid_dn = polygons(81, 50)
areaid_cr = polygons(81, 51)
areaid_cd = polygons(81, 52)
areaid_st = polygons(81, 53)
areaid_op = polygons(81, 54)
areaid_en = polygons(81, 57)
areaid_en20 = polygons(81, 58)
areaid_le = polygons(81, 60)
areaid_hl = polygons(81, 63)
areaid_sd = polygons(81, 70)
areaid_po = polygons(81, 81)
areaid_it = polygons(81, 84)
areaid_et = polygons(81, 101)
areaid_lvt = polygons(81, 108)
areaid_re = polygons(81, 125)
areaid_ag = polygons(81, 79)
poly_rs = polygons(66, 13)
diff_rs = polygons(65, 13)
pwell_rs = polygons(64, 13)
li_rs = polygons(67, 13)
cfom = polygons(22, 20)

# Define a new custom function that selects polygons by their number of holes:
# It will return a new layer containing those polygons with min to max holes.
# max can be nil to omit the upper limit.
#class DRC::DRCLayer
#  def with_holes(min, max)
#    new_data = RBA::Region::new
#    self.data.each do |p|
#      if p.holes >= (min || 0) && (!max || p.holes <= max)
#        new_data.insert(p)
#      end
#    end
#    DRC::DRCLayer::new(@engine, new_data)
#  end
#end

# DRC section
########################
log("DRC section")
out = polygon_layer
out_edge = polygon_layer

#///////////////////////////////////////////
# FRONT-END checks
#///////////////////////////////////////////
if FEOL
log("FEOL section")

deep; log_modes()
m2_interact_capm = m2.interacting(capm)
Tiled(); log_modes()

#   dnwell
drc_check(outputs.push({category: "dnwell.2", description: "dnwell.2 : min. dnwell width : 3.0um", data: out}), Array.new.push({name: "dnwell", layer: dnwell}), "dnwell.width_check(3/#{lay.dbu})")

# nwell
out = polygon_layer
drc_check(outputs.push({category: "nwell.1", description: "nwell.1 : min. nwell width : 0.84um", data: out}), Array.new.push({name: "nwell", layer: nwell}), "nwell.width_check(0.84/#{lay.dbu})")

deep; log_modes()
nwell.isolated(1.27, euclidian).output("nwell.2a", "nwell.2a : min. nwell spacing (merged if less) : 1.27um")
Tiled(); log_modes()

# hvtp
out = polygon_layer
drc_check(outputs.push({category: "hvtp.1", description: "hvtp.1 : min. hvtp width : 0.38um", data: out}), Array.new.push({name: "hvtp", layer: hvtp}), "hvtp.width_check(0.38/#{lay.dbu})")

deep; log_modes()
hvtp.isolated(0.38, euclidian).output("hvtp.2", "hvtp.2 : min. hvtp spacing : 0.38um")
Tiled(); log_modes()

#   hvtr
out = polygon_layer
drc_check(outputs.push({category: "hvtr.1", description: "hvtr.1 : min. hvtr width : 0.38um", data: out}), Array.new.push({name: "hvtr", layer: hvtr}), "hvtr.width_check(0.38/#{lay.dbu})")

deep; log_modes()
hvtr.isolated(0.38, euclidian).output("hvtr.2", "hvtr.2 : min. hvtr spacing : 0.38um")
Tiled(); log_modes()

#   lvtn
out = polygon_layer
drc_check(outputs.push({category: "lvtn.1a", description: "lvtn.1a : min. lvtn width : 0.38um", data: out}), Array.new.push({name: "lvtn", layer: lvtn}), "lvtn.width_check(0.38/#{lay.dbu})")

deep; log_modes()
lvtn.isolated(0.38, euclidian).output("lvtn.2", "lvtn.2 : min. lvtn spacing : 0.38um")
Tiled(); log_modes()

#   ncm
out = polygon_layer
drc_check(outputs.push({category: "ncm.1", description: "ncm.1 : min. ncm width : 0.38um", data: out}), Array.new.push({name: "ncm", layer: ncm}), " ncm.width_check(0.38/#{lay.dbu})")

deep; log_modes()
ncm.isolated(0.38, euclidian).output("ncm.2a", "ncm.2a : min. ncm spacing : 0.38um")
Tiled(); log_modes()

#   diff-tap
deep; log_modes()
  diff_width = diff.rectangles.width(0.15, euclidian).polygons
  diff_cross_areaid_ce = diff_width.edges.outside_part(areaid_ce).not(diff_width.outside(areaid_ce).edges)
  diff_cross_areaid_ce.output("difftap.1", "difftap.1 : min. diff width across areaid:ce : 0.15um")
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "difftap.1_a", description: "difftap.1_a : min. diff width across areaid:ce : 0.15um", data: out}), Array.new.push({name: "diff", layer: diff}, {name: "areaid_ce", layer: areaid_ce}), "diff.outside(areaid_ce).width_check(0.15/#{lay.dbu})")

deep; log_modes()
  tap_width = tap.rectangles.width(0.15, euclidian).polygons
  tap_cross_areaid_ce = tap_width.edges.outside_part(areaid_ce).not(tap_width.outside(areaid_ce).edges)
  tap_cross_areaid_ce.output("difftap.1_a", "difftap.1_a : min. tap width across areaid:ce : 0.15um")
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "difftap.1_c", description: "difftap.1_c : min. diff width across areaid:ce : 0.15um", data: out}), Array.new.push({name: "tap", layer: tap}, {name: "areaid_ce", layer: areaid_ce}), "tap.outside(areaid_ce).width_check(0.15/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "difftap.1_c", description: "difftap.1_c : min. diff width across areaid:ce : 0.15um", data: out}), Array.new.push({name: "tap", layer: tap}, {name: "diff", layer: diff}), "(diff + tap).space_check(0.27/#{lay.dbu})")

#   tunm
out = polygon_layer
drc_check(outputs.push({category: "tunm.1", description: "tunm.1 : min. tunm width : 0.41um", data: out}), Array.new.push({name: "tunm", layer: tunm}), "tunm.width_check(0.41/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "tunm.2", description: "tunm.2 : min. tunm spacing : 0.5um", data: out}), Array.new.push({name: "tunm", layer: tunm}), "tunm.space_check(0.5/#{lay.dbu})")

#tunm.isolated(0.5, euclidian).output("tunm.2", "tunm.2 : min. tunm spacing : 0.5um")

#   poly
out = polygon_layer
drc_check(outputs.push({category: "poly.1a", description: "poly.1a : min. poly width : 0.15um", data: out}), Array.new.push({name: "poly", layer: poly}), "poly.width_check(0.15/#{lay.dbu})")

deep; log_modes()
poly.not(areaid_ce).isolated(0.21, euclidian).output("poly.2", "poly.2 : min. poly spacing : 0.21um")
Tiled(); log_modes()

#   rpm
out = polygon_layer
drc_check(outputs.push({category: "rpm.1a", description: "rpm.1a : min. rpm width : 1.27um", data: out}), Array.new.push({name: "rpm", layer: rpm}), "rpm.width_check(1.27/#{lay.dbu})")

deep; log_modes()
rpm.isolated(0.84, euclidian).output("rpm.2", "rpm.2 : min. rpm spacing : 0.84um")
Tiled(); log_modes()

#   npc
out = polygon_layer
drc_check(outputs.push({category: "npc.1", description: "npc.1 : min. npc width : 0.27um", data: out}), Array.new.push({name: "npc", layer: npc}), "npc.width_check(0.27/#{lay.dbu})")

deep; log_modes()
npc.isolated(0.27, euclidian).output("npc.2", "npc.2 : min. npc spacing, should be mnually merge if less : 0.27um")
Tiled(); log_modes()

# licon
difftap = diff.or(tap)
xfom = difftap.not(poly)
licon1ToXfom = licon.interacting(licon.and(xfom))
licon1ToXfom_PERI = licon1ToXfom.not(areaid_ce)

out = polygon_layer
drc_check(outputs.push({category: "licon.1", description: "licon.1 : licon should be rectangle", data: out}), Array.new.push({name: "licon", layer: licon}), "licon.non_rectangles")

out = polygon_layer
drc_check(outputs.push({category: "licon.1_a/b", description: "licon.1_a/b : minimum/maximum width of licon : 0.17um", data: out}), Array.new.push({name: "licon", layer: licon}, {name: "rpm", layer: rpm}, {name: "urpm", layer: urpm}), "(licon - (rpm | urpm)).edges.with_length(0.17/#{lay.dbu}, true)")

deep; log_modes()
  licon1ToXfom_PERI.separation(npc, 0.09, euclidian).output("licon.13", "licon.13 : min. difftap licon spacing to npc : 0.09um")
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "licon.13_a", description: "licon.13_a : licon.13 : licon of diffTap in periphery must not overlap npc", data: out}), Array.new.push({name: "licon1ToXfom_PERI", layer: licon1ToXfom_PERI}, {name: "npc", layer: npc}), "licon1ToXfom_PERI & npc")

deep; log_modes()
  licon.interacting(poly).and(licon.interacting(difftap)).output("licon.17", "licon.17 : Licons may not overlap both poly and (diff or tap)")
Tiled(); log_modes()

# CAPM
deep; log_modes()
  m3_bot_plate = (capm.and(m3)).sized(0.14)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "capm.1", description: "capm.1 : min. capm width : 1.0um", data: out}), Array.new.push({name: "capm", layer: capm}), "capm.width_check(1.0/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "capm.2a", description: "capm.2a : min. capm spacing : 0.84um", data: out}), Array.new.push({name: "capm", layer: capm}), "capm.space_check(0.84/#{lay.dbu})")

#capm.isolated(0.84, euclidian).output("capm.2a", "capm.2a : min. capm spacing : 0.84um")

m3.interacting(capm).isolated(1.2, euclidian).output("capm.2b", "capm.2b : min. capm spacing : 1.2um")

m3_bot_plate.isolated(1.2, euclidian).output("capm.2b_a", "capm.2b_a : min. spacing of m3_bot_plate : 1.2um")

deep; log_modes()
  capm.and(m3).enclosing(m3, 0.14, euclidian).output("capm.3", "capm.3 : min. capm and m3 enclosure of m3 : 0.14um")
  m3.enclosing(capm, 0.14, euclidian).output("capm.3_a", "capm.3_a : min. m3 enclosure of capm : 0.14um")
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "capm.4", description: "capm.4 : min. capm enclosure of via3 : 0.14um", data: out}), Array.new.push({name: "capm", layer: capm}, {name: "via3", layer: via3}), "capm.enclosing_check(via3, 0.14/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "capm.5", description: "capm.5 : min. capm spacing to via3 : 0.14um", data: out}), Array.new.push({name: "capm", layer: capm}, {name: "via3", layer: via3}), "capm.separation_check(via3, 0.14/#{lay.dbu})")

# CAP2M
deep; log_modes()
  m4_bot_plate = (cap2m.and(m4)).sized(0.14)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "cap2m.1", description: "cap2m.1 : min. cap2m width : 1.0um", data: out}), Array.new.push({name: "cap2m", layer: cap2m}), "cap2m.width_check(1.0/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "cap2m.2a", description: "cap2m.2a : min. cap2m spacing : 0.84um", data: out}), Array.new.push({name: "cap2m", layer: cap2m}), "cap2m.space_check(0.84/#{lay.dbu})")

#cap2m.isolated(0.84, euclidian).output("cap2m.2a", "cap2m.2a : min. cap2m spacing : 0.84um")

deep; log_modes()
  m4.interacting(cap2m).isolated(1.2, euclidian).output("cap2m.2b", "cap2m.2b : min. cap2m spacing : 1.2um")
  m4_bot_plate.space(1.2, euclidian).output("cap2m.2b_a", "cap2m.2b_a : min. spacing of m4_bot_plate : 1.2um")
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "cap2m.3", description: "cap2m.3 : min. cap2m and m4 enclosure of m4 : 0.14um", data: out}), Array.new.push({name: "m4", layer: m4}, {name: "cap2m", layer: cap2m}), "(cap2m & m4).enclosing_check(cap2m, 0.14/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "cap2m.4", description: "cap2m.4 : min. cap2m enclosure of via4 : 0.14um", data: out}), Array.new.push({name: "cap2m", layer: cap2m}, {name: "via4", layer: via4}), "cap2m.enclosing_check(via4, 0.14/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "cap2m.5", description: "cap2m.5 : min. cap2m spacing to via4 : 0.14um", data: out}), Array.new.push({name: "cap2m", layer: cap2m}, {name: "via4", layer: via4}), "cap2m.separation_check(via4, 0.14/#{lay.dbu})")


#   hvi
hvi_peri = hvi.not(areaid_ce)

out = polygon_layer
drc_check(outputs.push({category: "hvi.1", description: "hvi.1 : min. hvi width : 0.6um", data: out}), Array.new.push({name: "hvi_peri", layer: hvi_peri}), "hvi_peri.width_check(0.6/#{lay.dbu})")

deep; log_modes()
  hvi_peri.isolated(0.7, euclidian).output("hvi.2a", "hvi.2a : min. hvi spacing : 0.7um")
Tiled(); log_modes()

#   hvntm
hvntm_peri = hvntm.not(areaid_ce)
out = polygon_layer
drc_check(outputs.push({category: "hvntm.1", description: "hvntm.1 : min. hvntm width : 0.7um", data: out}), Array.new.push({name: "hvntm_peri", layer: hvntm_peri}), "hvntm_peri.width_check(0.7/#{lay.dbu})")

deep; log_modes()
  hvntm_peri.isolated(0.7, euclidian).output("hvntm.2", "hvntm.2 : min. hvntm spacing : 0.7um")
Tiled(); log_modes()

log("FEOL queued, executing the rules...")

$tp.execute("DRC")

log("FEOL rule execution done")

end #FEOL

#///////////////////////////////////////////
# BACK-END checks
#///////////////////////////////////////////

if BEOL
log("BEOL section")

Tiled(); log_modes()

#   li
linotace = li.not(areaid_ce)
out = polygon_layer
drc_check(outputs.push({category: "li.1", description: "li.1 : min. li width : 0.17um", data: out}), Array.new.push({name: "linotace", layer: linotace}), "linotace.width_check(0.17/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "li.3", description: "li.3 : min. li spacing : 0.17um", data: out}), Array.new.push({name: "linotace", layer: linotace}), "linotace.space_check(0.17/#{lay.dbu})")

deep; log_modes()
  licon_peri = licon.not(areaid_ce)
  li_edges_with_less_enclosure = li.enclosing(licon_peri, 0.08, not_opposite, projection).second_edges
  error_corners = li_edges_with_less_enclosure.width(angle_limit(100.0), 1.dbu)
  li_interact = licon_peri.interacting(error_corners.polygons(1.dbu))
  li_interact.output("li.5", "li.5 : min. li enclosure of licon of 2 opposite edges : 0.08um")
Tiled(); log_modes()

li.with_area(0..0.0561).output("li.6", "li.6 : min. li area : 0.0561um²")

#   ct
mconnotace = mcon.not(areaid_ce)

out = polygon_layer
drc_check(outputs.push({category: "ct.1", description: "ct.1 : minimum/maximum width of mcon : 0.17um", data: out}), Array.new.push({name: "mconnotace", layer: mconnotace}), "mconnotace.edges.with_length(0.17/#{lay.dbu}, true)")

out = polygon_layer
drc_check(outputs.push({category: "ct.2", description: "ct.2 : min. mcon spacing : 0.19um", data: out}), Array.new.push({name: "mcon", layer: mcon}), "mcon.space_check(0.19/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "ct.4", description: "ct.4 : mcon should covered by li", data: out}), Array.new.push({name: "mconnotace", layer: mconnotace}, {name: "li", layer: li}), "mconnotace - li")

#   m1
out = polygon_layer
drc_check(outputs.push({category: "m1.1", description: "m1.1 : min. m1 width : 0.14um", data: out}), Array.new.push({name: "m1", layer: m1}), "m1.width_check(0.14/#{lay.dbu})")

deep; log_modes()
  huge_m1 = m1.sized(-1.5).sized(1.5).snap(0.005) & m1
  non_huge_m1 = m1.edges - huge_m1
  huge_m1 = huge_m1.edges.outside_part(m1.merged)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "m1.2", description: "m1.2 : min. m1 spacing : 0.14um", data: out}), Array.new.push({name: "non_huge_m1", layer: non_huge_m1}), "non_huge_m1.space_check(0.14/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m1.3ab", description: "m1.3ab : min. 3um.m1 spacing m1 : 0.28um", data: out}), Array.new.push({name: "non_huge_m1", layer: non_huge_m1}, {name: "huge_m1", layer: huge_m1}), "huge_m1.separation_check(non_huge_m1, 0.28/#{lay.dbu}) + huge_m1.space_check(0.28/#{lay.dbu})")

deep; log_modes()
  not_in_cell6 = layout(source.cell_obj).select("-s8cell_ee_plus_sseln_a", "-s8cell_ee_plus_sseln_b", "-s8cell_ee_plus_sselp_a", "-s8cell_ee_plus_sselp_b", "-s8fpls_pl8", "-s8fs_cmux4_fm")
  not_in_cell6_m1 = not_in_cell6.input(m1_wildcard)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "791_m1.4", description: "791_m1.4 : min. m1 enclosure of mcon : 0.03um", data: out}), Array.new.push({name: "not_in_cell6_m1", layer: not_in_cell6_m1}, {name: "mconnotace", layer: mconnotace}), "not_in_cell6_m1.enclosing_check(mconnotace, 0.03/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m1.4", description: "m1.4 : mcon periphery must be enclosed by m1", data: out}), Array.new.push({name: "mconnotace", layer: mconnotace}, {name: "m1", layer: m1}), "mconnotace - m1")

deep; log_modes()
  in_cell6 = layout(source.cell_obj).select("+s8cell_ee_plus_sseln_a", "+s8cell_ee_plus_sseln_b", "+s8cell_ee_plus_sselp_a", "+s8cell_ee_plus_sselp_b", "+s8fpls_pl8", "+s8fs_cmux4_fm")
  in_cell6_m1 = in_cell6.input(m1_wildcard)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "m1.4a", description: "m1.4a : min. m1 enclosure of mcon for specific cells : 0.005um", data: out}), Array.new.push({name: "mcon", layer: mcon}, {name: "in_cell6_m1", layer: in_cell6_m1}), "in_cell6_m1.enclosing_check(mcon, 0.005/#{lay.dbu})")

m1.with_area(0..0.083).output("m1.6", "m1.6 : min. m1 area : 0.083um²")
m1.holes.with_area(0..0.14).output("m1.7", "m1.7 : min. m1 holes area : 0.14um²")


if backend_flow = AL

  
  poly_inclosing_m1                   = poly.enclosing(m1, 0.06, euclidian).polygons
  mcon_edges_with_less_enclosure_m1   = m1.enclosing(mcon, 0.06, projection).second_edges
  opposite4 = (mcon.edges - mcon_edges_with_less_enclosure_m1).width(0.17 + 1.dbu, projection).polygons

  deep; log_modes()  # say if we are is_deep? and is_tiled?
    mcon06 = mcon.interacting(poly_inclosing_m1)
    mcon06.not_interacting(opposite4).output("m1.5", "m1.5 : min. m1 enclosure of mcon of 2 opposite edges : 0.06um")
  Tiled(); log_modes()  # say if we are is_deep? and is_tiled?

end

# areaid_mt
#drc_check(outputs.push({category: "areaid_mt", description: "areaid_mt rules not supported", data: out}), Array.new.push({name: "areaid_mt", layer: areaid_mt}), "areaid_mt")


#   via
out = polygon_layer
drc_check(outputs.push({category: "via.3", description: "via.3 : Only min. square vias are allowed", data: out}), Array.new.push({name: "via", layer: via}), "via.non_squares")  

if backend_flow = AL
  ringVIA = via.drc(with_holes > 0)
  rectVIA = via.not(ringVIA)
  via_not_mt = rectVIA.not(areaid_mt)

  out = polygon_layer
  drc_check(outputs.push({category: "via.1a", description: "via.1a : via outside of moduleCut should be rectangular", data: out}), Array.new.push({name: "via_not_mt", layer: via_not_mt}), "via_not_mt.non_rectangles")

  out = polygon_layer
  drc_check(outputs.push({category: "via.1a_a", description: "via.1a_a : minimum width of via : 0.15um", data: out}), Array.new.push({name: "via_not_mt", layer: via_not_mt}), "via_not_mt.width_check(0.15/#{lay.dbu})")

  out = polygon_layer
  drc_check(outputs.push({category: "via.1a_b", description: "via.1a_b : maximum length of via : 0.15um", data: out}), Array.new.push({name: "via_not_mt", layer: via_not_mt}), "via_not_mt.edges.with_length(0.15/#{lay.dbu}, true)")

  via.isolated(0.17, euclidian).output("via.2", "via.2 : min. via spacing : 0.17um")

  ringVIA.drc(0.2.um < width <= 0.205.um).output("via.3/_a", "via.3/_a : min./max width of ring-shaped via : 0.2um/0.205um")
  out = polygon_layer
  drc_check(outputs.push({category: "via.3_b", description: "via.3_b : ring-shaped via must be enclosed by areaid_sl", data: out}), Array.new.push({name: "ringVIA", layer: ringVIA}, {name: "areaid_sl", layer: areaid_sl}), "ringVIA - areaid_sl")

  deep; log_modes()
    m1.enclosing(via.not_interacting(via.edges.without_length(0.15)), 0.055, euclidian).output("via.4a", "via.4a : min. m1 enclosure of 0.15um via : 0.055um")
  Tiled(); log_modes()
  out = polygon_layer
  drc_check(outputs.push({category: "via.4a_a", description: "via.4a_a : via must be enclosed by met1", data: out}), Array.new.push({name: "via", layer: via}, {name: "m1", layer: m1}), "(via.squares.edges.with_length(0.15/#{lay.dbu}, false)) - m1")
  
  
  via_not_interacting_via = via.not_interacting(via.edges.without_length(0.15))
  via1_edges_with_less_enclosure_m1 = m1.enclosing(via_not_interacting_via, 0.085, projection).second_edges
  opposite5 = (via_not_interacting_via.edges - via1_edges_with_less_enclosure_m1).width(0.15 + 1.dbu, projection).polygons
  via_without_length = via.edges.without_length(0.15)

  via1_edges_with_less_enclosure_m1 = m1.enclosing(via.not_interacting(via.edges.without_length(0.15)), 0.085, projection).second_edges
  opposite5 = (via.not_interacting(via.edges.without_length(0.15)).edges - via1_edges_with_less_enclosure_m1).width(0.15 + 1.dbu, projection).polygons
  via.not_interacting(via.edges.without_length(0.15)).not_interacting(opposite5).output("via.5a", "via.5a : min. m1 enclosure of 0.15um via of 2 opposite edges : 0.085um")
end

#   m2
deep; log_modes()
  huge_m2 = m2.sized(-1.5).sized(1.5).snap(0.005) & m2
  non_huge_m2 = m2.edges - huge_m2
  huge_m2 = huge_m2.edges.outside_part(m2.merged)
  via_outside_periphery = via.not(areaid_ce)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "m2.1", description: "m2.1 : min. m2 width : 0.14um", data: out}), Array.new.push({name: "m2", layer: m2}), "m2.width_check(0.14/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m2.2", description: "m2.2 : min. m2 spacing : 0.14um", data: out}), Array.new.push({name: "non_huge_m2", layer: non_huge_m2}), "non_huge_m2.space_check(0.14/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m2.3ab", description: "m2.3ab : min. 3um.m2 spacing m2 : 0.28um", data: out}), Array.new.push({name: "huge_m2", layer: huge_m2}, {name: "non_huge_m2", layer: non_huge_m2}), "(huge_m2.separation_check(non_huge_m2, 0.28/#{lay.dbu}) + huge_m2.space_check(0.28/#{lay.dbu}))")

m2.with_area(0..0.0676).output("m2.6", "m2.6 : min. m2 area : 0.0676um²")
m2.holes.with_area(0..0.14).output("m2.7", "m2.7 : min. m2 holes area : 0.14um²")


if backend_flow = AL
  deep; log_modes()
    m2.enclosing(via, 0.055, euclidian).output("m2.4", "m2.4 : min. m2 enclosure of via : 0.055um")
    via_outside_periphery.not(m2).output("m2.4_a", "m2.4_a : via in periphery must be enclosed by met2")
  Tiled(); log_modes()

  via_edges_with_less_enclosure_m2 = m2.enclosing(via, 0.085, projection).second_edges
  opposite7 = (via.edges - via_edges_with_less_enclosure_m2).width(0.2 + 1.dbu, projection).polygons
  
  deep; log_modes()
    via.not_interacting(opposite7).output("m2.5", "m2.5 : min. m2 enclosure of via of 2 opposite edges : 0.085um")
  Tiled(); log_modes()

end

#   via2
out = polygon_layer
drc_check(outputs.push({category: "via2.3", description: "via2.3 : Only min. square vias are allowed", data: out}), Array.new.push({name: "via2", layer: via2}), "via2.non_squares")

if backend_flow = AL
  ringVIA2 = via2.drc(with_holes > 0)
  rectVIA2 = via2.not(ringVIA2)
  via2_not_mt = rectVIA2.not(areaid_mt)
  out = polygon_layer
  drc_check(outputs.push({category: "via2.1a", description: "via2.1a : via2 outside of moduleCut should be rectangular", data: out}), Array.new.push({name: "via2_not_mt", layer: via2_not_mt}), "via2_not_mt.non_rectangles")

  out = polygon_layer
  drc_check(outputs.push({category: "via2.1a_a", description: "via2.1a_a : minimum width of via2 : 0.2um", data: out}), Array.new.push({name: "via2_not_mt", layer: via2_not_mt}), "via2_not_mt.width_check(0.2/#{lay.dbu})")

  out = polygon_layer
  drc_check(outputs.push({category: "via2.1a_b", description: "via2.1a_b : minimum/maximum width of via2 : 0.2um", data: out}), Array.new.push({name: "via2_not_mt", layer: via2_not_mt}), "via2_not_mt.edges.with_length(0.2/#{lay.dbu}, true)")

  via2.isolated(0.2, euclidian).output("via2.2", "via2.2 : min. via2 spacing : 0.2um")

  ringVIA2.drc(0.2.um < width <= 0.205.um).output("via2.3/_a", "via2.3/_a : min./max width of ring-shaped via2 : 0.2um/0.205um")
  out = polygon_layer
  drc_check(outputs.push({category: "via2.3_b", description: "via2.3_b : ring-shaped via2 must be enclosed by areaid_sl", data: out}), Array.new.push({name: "ringVIA2", layer: ringVIA2}, {name: "areaid_sl", layer: areaid_sl}), "ringVIA2 - areaid_sl")

  deep; log_modes()
    m2.enclosing(via2, 0.04, euclidian).output("via2.4", "via2.4 : min. m2 enclosure of via2 : 0.04um")
  Tiled(); log_modes()
  out = polygon_layer
  drc_check(outputs.push({category: "via.4_a", description: "via.4_a : via must be enclosed by met2", data: out}), Array.new.push({name: "via2", layer: via2}, {name: "m2", layer: m2}), "via2 - m1")
  
  deep; log_modes()
    via2_edges_with_less_enclosure = m2.enclosing(via2, 0.085, projection).second_edges
    error_corners = via2_edges_with_less_enclosure.width(angle_limit(100.0), 1.dbu)
    via2_interact = via2.interacting(error_corners.polygons(1.dbu))
    via2_interact.output("via2.5", "via2.5 : min. m3 enclosure of via2 of 2 opposite edges : 0.085um")
  Tiled(); log_modes()
end

#   m3
deep; log_modes()
  huge_m3 = m3.sized(-1.5).sized(1.5).snap(0.005) & m3
  non_huge_m3 = m3.edges - huge_m2
  huge_m3 = huge_m3.edges.outside_part(m3.merged)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "m3.1", description: "m3.1 : min. m3 width : 0.3um", data: out}), Array.new.push({name: "m3", layer: m3}), "m3.width_check(0.3/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m3.2", description: "m3.2 : min. m3 spacing : 0.3um", data: out}), Array.new.push({name: "m3", layer: m3}), "non_huge_m3.space_check(0.3/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m3.3cd", description: "m3.3cd : min. 4um.m3 spacing m3 : 0.4um", data: out}), Array.new.push({name: "huge_m3", layer: huge_m3}, {name: "non_huge_m3", layer: non_huge_m3}), "(huge_m3.separation_check(non_huge_m3, 0.4/#{lay.dbu}) + huge_m3.space_check(0.4/#{lay.dbu}))")

if backend_flow = AL
  deep; log_modes()
    m3.enclosing(via2, 0.065, euclidian).output("m3.4", "m3.4 : min. m3 enclosure of via2 : 0.065um")
    via2.not(m3).output("m3.4_a", "m3.4_a : via2 must be enclosed by met3")
  Tiled(); log_modes()
end

#   via3
if backend_flow = AL
  ringVIA3 = via3.drc(with_holes > 0)
  rectVIA3 = via3.not(ringVIA3)
  via3_not_mt = rectVIA3.not(areaid_mt)

  out = polygon_layer
  drc_check(outputs.push({category: "via3.1", description: "via3.1 : via3 outside of moduleCut should be rectangular", data: out}), Array.new.push({name: "via3_not_mt", layer: via3_not_mt}), "via3_not_mt.non_rectangles")

  out = polygon_layer
  drc_check(outputs.push({category: "via3.1_a", description: "via3.1_a : minimum width of via3 : 0.2um", data: out}), Array.new.push({name: "via3_not_mt", layer: via3_not_mt}), "via3_not_mt.width_check(0.2/#{lay.dbu})")

  out = polygon_layer
  drc_check(outputs.push({category: "via3.1_b", description: "via3.1_b : minimum/maximum width of via3 : 0.2um", data: out}), Array.new.push({name: "via3_not_mt", layer: via3_not_mt}), "via3_not_mt.edges.with_length(0.2/#{lay.dbu}, true)")

  via3.isolated(0.2, euclidian).output("via3.2", "via3.2 : min. via3 spacing : 0.2um")

  deep; log_modes()
    m3.enclosing(via3, 0.06, euclidian).output("via3.4", "via3.4 : min. m3 enclosure of via3 : 0.06um")
  Tiled(); log_modes()

  out = polygon_layer
  drc_check(outputs.push({category: "via3.4_a", description: "via3.4_a : non-ring via3 must be enclosed by met3", data: out}), Array.new.push({name: "rectVIA3", layer: rectVIA3}, {name: "m3", layer: m3}), "rectVIA3 - m3")

  deep; log_modes()
    via_edges_with_less_enclosure = m3.enclosing(via3, 0.09, projection).second_edges
    error_corners = via_edges_with_less_enclosure.width(angle_limit(100.0), 1.dbu)
    via3_interact = via3.interacting(error_corners.polygons(1.dbu))
    via3_interact.output("via3.5", "via3.5 : min. m3 enclosure of via3 of 2 opposite edges : 0.09um")
  Tiled(); log_modes()

end

#   m4
deep; log_modes()
  huge_m4 = m4.sized(-1.5).sized(1.5).snap(0.005) & m4
  non_huge_m4 = m4.edges - huge_m4
  huge_m4 = huge_m4.edges.outside_part(m4.merged)
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "m4.1", description: "m4.1 : min. m4 width : 0.3um", data: out}), Array.new.push({name: "m4", layer: m4}), "m4.width_check(0.3/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m4.2", description: "m4.2 : min. m4 spacing : 0.3um", data: out}), Array.new.push({name: "m4", layer: m4}), "non_huge_m4.space_check(0.3/#{lay.dbu})")

deep; log_modes()
  m4.with_area(0..0.240).output("m4.4a", "m4.4a : min. m4 area : 0.240um²")
Tiled(); log_modes()

out = polygon_layer
drc_check(outputs.push({category: "m4.5ab", description: "m4.5ab : min. 3um.m4 spacing m4 : 0.4um", data: out}), Array.new.push({name: "huge_m4", layer: huge_m4}, {name: "non_huge_m4", layer: non_huge_m4}), "huge_m4.separation_check(non_huge_m4, 0.4/#{lay.dbu}) + huge_m4.space_check(0.4/#{lay.dbu})")

if backend_flow = AL
  deep; log_modes()
    m4.enclosing(via3, 0.065, euclidian).output("m4.3", "m4.3 : min. m4 enclosure of via3 : 0.065um")
    via3.not(m4).output("m4.3_a", "m4.3_a : via3 must be enclosed by met4")
  Tiled(); log_modes()
end

#   via4
ringVIA4 = via4.drc(with_holes > 0)
rectVIA4 = via4.not(ringVIA4)
via4_not_mt = rectVIA4.not(areaid_mt)

out = polygon_layer
drc_check(outputs.push({category: "via4.1", description: "via4.1 : via4 outside of moduleCut should be rectangular", data: out}), Array.new.push({name: "via4_not_mt", layer: via4_not_mt}), "via4_not_mt.non_rectangles")

out = polygon_layer
drc_check(outputs.push({category: "via4.1_a", description: "via4.1_a : min. width of via4 outside of moduleCut : 0.8um", data: out}), Array.new.push({name: "via4_not_mt", layer: via4_not_mt}), "via4_not_mt.width_check(0.8/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "via4.1_b", description: "via4.1_b : maximum length of via4 : 0.8um", data: out}), Array.new.push({name: "via4_not_mt", layer: via4_not_mt}), "via4_not_mt.edges.with_length(0.8/#{lay.dbu}, true)")

via4.isolated(0.8, euclidian).output("via4.2", "via4.2 : min. via4 spacing : 0.8um")

ringVIA4.drc(0.2.um < width <= 0.205.um).output("via4.3", "via4.3 : min./max width of ring-shaped via4 : 0.2um/0.205um")
out = polygon_layer
drc_check(outputs.push({category: "via4.3_b", description: "via4.3_b : ring-shaped via4 must be enclosed by areaid_sl", data: out}), Array.new.push({name: "ringVIA4", layer: ringVIA4}), "ringVIA4 - areaid_sl")

deep; log_modes()
  m4.enclosing(via4, 0.19, euclidian).output("via4.4", "via4.4 : min. m4 enclosure of via4 : 0.19um")
  via4.not(m4).output("via4.4_a", "via4.4_a : m4 must enclose all via4")
Tiled(); log_modes()

#   m5
out = polygon_layer
drc_check(outputs.push({category: "m5.1", description: "m5.1 : min. m5 width : 1.6um", data: out}), Array.new.push({name: "m5", layer: m5}), "m5.width_check(1.6/#{lay.dbu})")

out = polygon_layer
drc_check(outputs.push({category: "m5.2", description: "m5.2 : min. m5 spacing : 1.6um", data: out}), Array.new.push({name: "m5", layer: m5}), "m5.space_check(1.6/#{lay.dbu})")

deep; log_modes()
  m5.enclosing(via4, 0.31, euclidian).output("m5.3", "m5.3 : min. m5 enclosure of via4 : 0.31um")
  via4.not(m5).output("m5.3_a", "m5.3_a : min. m5 enclosure of via4 : 0.31um")
Tiled(); log_modes()

m5.with_area(0..4.0).output("m5.4", "m5.4 : min. m5 area : 4.0um²")

#   pad
deep; log_modes()
  pad.isolated(1.27, euclidian).output("pad.2", "pad.2 : min. pad spacing : 1.27um")
Tiled(); log_modes()

log("BEOL queued, executing the rules...")

$tp.execute("DRC")

log("BEOL execution done")

end #BEOL

outputs.each do |outs|
  outs[:data].output(outs[:category], outs[:description])
end
